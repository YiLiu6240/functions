// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __myFunctions_RcppExports_h__
#define __myFunctions_RcppExports_h__

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace myFunctions {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("myFunctions", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("myFunctions", "myFunctions_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in myFunctions");
            }
        }
    }

    inline arma::mat cbindARMA(const arma::mat& A, const arma::mat& B) {
        typedef SEXP(*Ptr_cbindARMA)(SEXP,SEXP);
        static Ptr_cbindARMA p_cbindARMA = NULL;
        if (p_cbindARMA == NULL) {
            validateSignature("arma::mat(*cbindARMA)(const arma::mat&,const arma::mat&)");
            p_cbindARMA = (Ptr_cbindARMA)R_GetCCallable("myFunctions", "myFunctions_cbindARMA");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_cbindARMA(Rcpp::wrap(A), Rcpp::wrap(B));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::mat >(__result);
    }

    inline arma::vec colSums(const arma::mat& X) {
        typedef SEXP(*Ptr_colSums)(SEXP);
        static Ptr_colSums p_colSums = NULL;
        if (p_colSums == NULL) {
            validateSignature("arma::vec(*colSums)(const arma::mat&)");
            p_colSums = (Ptr_colSums)R_GetCCallable("myFunctions", "myFunctions_colSums");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_colSums(Rcpp::wrap(X));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::vec >(__result);
    }

    inline double convertToAlpha(const double& mu, const double& s2) {
        typedef SEXP(*Ptr_convertToAlpha)(SEXP,SEXP);
        static Ptr_convertToAlpha p_convertToAlpha = NULL;
        if (p_convertToAlpha == NULL) {
            validateSignature("double(*convertToAlpha)(const double&,const double&)");
            p_convertToAlpha = (Ptr_convertToAlpha)R_GetCCallable("myFunctions", "myFunctions_convertToAlpha");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_convertToAlpha(Rcpp::wrap(mu), Rcpp::wrap(s2));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline double convertToBeta(const double& mu, const double& s2) {
        typedef SEXP(*Ptr_convertToBeta)(SEXP,SEXP);
        static Ptr_convertToBeta p_convertToBeta = NULL;
        if (p_convertToBeta == NULL) {
            validateSignature("double(*convertToBeta)(const double&,const double&)");
            p_convertToBeta = (Ptr_convertToBeta)R_GetCCallable("myFunctions", "myFunctions_convertToBeta");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_convertToBeta(Rcpp::wrap(mu), Rcpp::wrap(s2));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline double dMVNorm(const arma::vec& y, const arma::vec& mu, const arma::mat& Sig) {
        typedef SEXP(*Ptr_dMVNorm)(SEXP,SEXP,SEXP);
        static Ptr_dMVNorm p_dMVNorm = NULL;
        if (p_dMVNorm == NULL) {
            validateSignature("double(*dMVNorm)(const arma::vec&,const arma::vec&,const arma::mat&)");
            p_dMVNorm = (Ptr_dMVNorm)R_GetCCallable("myFunctions", "myFunctions_dMVNorm");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_dMVNorm(Rcpp::wrap(y), Rcpp::wrap(mu), Rcpp::wrap(Sig));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline arma::vec dmvnormArmaVec(const arma::vec& x, const arma::vec& mean, const arma::mat& Sigma, const bool logd = false) {
        typedef SEXP(*Ptr_dmvnormArmaVec)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_dmvnormArmaVec p_dmvnormArmaVec = NULL;
        if (p_dmvnormArmaVec == NULL) {
            validateSignature("arma::vec(*dmvnormArmaVec)(const arma::vec&,const arma::vec&,const arma::mat&,const bool)");
            p_dmvnormArmaVec = (Ptr_dmvnormArmaVec)R_GetCCallable("myFunctions", "myFunctions_dmvnormArmaVec");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_dmvnormArmaVec(Rcpp::wrap(x), Rcpp::wrap(mean), Rcpp::wrap(Sigma), Rcpp::wrap(logd));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::vec >(__result);
    }

    inline double phi(const double& x) {
        typedef SEXP(*Ptr_phi)(SEXP);
        static Ptr_phi p_phi = NULL;
        if (p_phi == NULL) {
            validateSignature("double(*phi)(const double&)");
            p_phi = (Ptr_phi)R_GetCCallable("myFunctions", "myFunctions_phi");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_phi(Rcpp::wrap(x));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline double logDet(const arma::mat Sig) {
        typedef SEXP(*Ptr_logDet)(SEXP);
        static Ptr_logDet p_logDet = NULL;
        if (p_logDet == NULL) {
            validateSignature("double(*logDet)(const arma::mat)");
            p_logDet = (Ptr_logDet)R_GetCCallable("myFunctions", "myFunctions_logDet");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_logDet(Rcpp::wrap(Sig));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline arma::mat makeDistARMA(const arma::mat& coords1, const arma::mat& coords2) {
        typedef SEXP(*Ptr_makeDistARMA)(SEXP,SEXP);
        static Ptr_makeDistARMA p_makeDistARMA = NULL;
        if (p_makeDistARMA == NULL) {
            validateSignature("arma::mat(*makeDistARMA)(const arma::mat&,const arma::mat&)");
            p_makeDistARMA = (Ptr_makeDistARMA)R_GetCCallable("myFunctions", "myFunctions_makeDistARMA");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_makeDistARMA(Rcpp::wrap(coords1), Rcpp::wrap(coords2));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::mat >(__result);
    }

    inline List makePCA(const arma::mat X) {
        typedef SEXP(*Ptr_makePCA)(SEXP);
        static Ptr_makePCA p_makePCA = NULL;
        if (p_makePCA == NULL) {
            validateSignature("List(*makePCA)(const arma::mat)");
            p_makePCA = (Ptr_makePCA)R_GetCCallable("myFunctions", "myFunctions_makePCA");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_makePCA(Rcpp::wrap(X));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline arma::mat mvrnormArma(const int& n, const arma::vec& mu, const arma::mat& Sigma) {
        typedef SEXP(*Ptr_mvrnormArma)(SEXP,SEXP,SEXP);
        static Ptr_mvrnormArma p_mvrnormArma = NULL;
        if (p_mvrnormArma == NULL) {
            validateSignature("arma::mat(*mvrnormArma)(const int&,const arma::vec&,const arma::mat&)");
            p_mvrnormArma = (Ptr_mvrnormArma)R_GetCCallable("myFunctions", "myFunctions_mvrnormArma");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_mvrnormArma(Rcpp::wrap(n), Rcpp::wrap(mu), Rcpp::wrap(Sigma));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::mat >(__result);
    }

    inline arma::vec mvrnormArmaVec(const arma::vec& mu, const arma::mat& Sigma) {
        typedef SEXP(*Ptr_mvrnormArmaVec)(SEXP,SEXP);
        static Ptr_mvrnormArmaVec p_mvrnormArmaVec = NULL;
        if (p_mvrnormArmaVec == NULL) {
            validateSignature("arma::vec(*mvrnormArmaVec)(const arma::vec&,const arma::mat&)");
            p_mvrnormArmaVec = (Ptr_mvrnormArmaVec)R_GetCCallable("myFunctions", "myFunctions_mvrnormArmaVec");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_mvrnormArmaVec(Rcpp::wrap(mu), Rcpp::wrap(Sigma));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::vec >(__result);
    }

    inline IntegerVector orderArma(const NumericVector x) {
        typedef SEXP(*Ptr_orderArma)(SEXP);
        static Ptr_orderArma p_orderArma = NULL;
        if (p_orderArma == NULL) {
            validateSignature("IntegerVector(*orderArma)(const NumericVector)");
            p_orderArma = (Ptr_orderArma)R_GetCCallable("myFunctions", "myFunctions_orderArma");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_orderArma(Rcpp::wrap(x));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<IntegerVector >(__result);
    }

    inline arma::mat rbindARMA(const arma::mat& A, const arma::mat& B) {
        typedef SEXP(*Ptr_rbindARMA)(SEXP,SEXP);
        static Ptr_rbindARMA p_rbindARMA = NULL;
        if (p_rbindARMA == NULL) {
            validateSignature("arma::mat(*rbindARMA)(const arma::mat&,const arma::mat&)");
            p_rbindARMA = (Ptr_rbindARMA)R_GetCCallable("myFunctions", "myFunctions_rbindARMA");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_rbindARMA(Rcpp::wrap(A), Rcpp::wrap(B));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::mat >(__result);
    }

    inline arma::vec rMVNArma(const arma::mat& A, const arma::vec& b) {
        typedef SEXP(*Ptr_rMVNArma)(SEXP,SEXP);
        static Ptr_rMVNArma p_rMVNArma = NULL;
        if (p_rMVNArma == NULL) {
            validateSignature("arma::vec(*rMVNArma)(const arma::mat&,const arma::vec&)");
            p_rMVNArma = (Ptr_rMVNArma)R_GetCCallable("myFunctions", "myFunctions_rMVNArma");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_rMVNArma(Rcpp::wrap(A), Rcpp::wrap(b));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::vec >(__result);
    }

    inline double rMVNArmaScalar(const double& a, const double& b) {
        typedef SEXP(*Ptr_rMVNArmaScalar)(SEXP,SEXP);
        static Ptr_rMVNArmaScalar p_rMVNArmaScalar = NULL;
        if (p_rMVNArmaScalar == NULL) {
            validateSignature("double(*rMVNArmaScalar)(const double&,const double&)");
            p_rMVNArmaScalar = (Ptr_rMVNArmaScalar)R_GetCCallable("myFunctions", "myFunctions_rMVNArmaScalar");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_rMVNArmaScalar(Rcpp::wrap(a), Rcpp::wrap(b));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<double >(__result);
    }

    inline arma::vec rowMeans(const arma::mat& X) {
        typedef SEXP(*Ptr_rowMeans)(SEXP);
        static Ptr_rowMeans p_rowMeans = NULL;
        if (p_rowMeans == NULL) {
            validateSignature("arma::vec(*rowMeans)(const arma::mat&)");
            p_rowMeans = (Ptr_rowMeans)R_GetCCallable("myFunctions", "myFunctions_rowMeans");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_rowMeans(Rcpp::wrap(X));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::vec >(__result);
    }

    inline arma::vec rowSds(const arma::mat& X) {
        typedef SEXP(*Ptr_rowSds)(SEXP);
        static Ptr_rowSds p_rowSds = NULL;
        if (p_rowSds == NULL) {
            validateSignature("arma::vec(*rowSds)(const arma::mat&)");
            p_rowSds = (Ptr_rowSds)R_GetCCallable("myFunctions", "myFunctions_rowSds");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_rowSds(Rcpp::wrap(X));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::vec >(__result);
    }

    inline arma::vec rowSums(const arma::mat& X) {
        typedef SEXP(*Ptr_rowSums)(SEXP);
        static Ptr_rowSums p_rowSums = NULL;
        if (p_rowSums == NULL) {
            validateSignature("arma::vec(*rowSums)(const arma::mat&)");
            p_rowSums = (Ptr_rowSums)R_GetCCallable("myFunctions", "myFunctions_rowSums");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_rowSums(Rcpp::wrap(X));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::vec >(__result);
    }

    inline List svdARMA(const arma::mat& X) {
        typedef SEXP(*Ptr_svdARMA)(SEXP);
        static Ptr_svdARMA p_svdARMA = NULL;
        if (p_svdARMA == NULL) {
            validateSignature("List(*svdARMA)(const arma::mat&)");
            p_svdARMA = (Ptr_svdARMA)R_GetCCallable("myFunctions", "myFunctions_svdARMA");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_svdARMA(Rcpp::wrap(X));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline List dcsvdARMA(const arma::mat& X) {
        typedef SEXP(*Ptr_dcsvdARMA)(SEXP);
        static Ptr_dcsvdARMA p_dcsvdARMA = NULL;
        if (p_dcsvdARMA == NULL) {
            validateSignature("List(*dcsvdARMA)(const arma::mat&)");
            p_dcsvdARMA = (Ptr_dcsvdARMA)R_GetCCallable("myFunctions", "myFunctions_dcsvdARMA");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_dcsvdARMA(Rcpp::wrap(X));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

}

#endif // __myFunctions_RcppExports_h__
